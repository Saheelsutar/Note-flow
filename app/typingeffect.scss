$strings: (
    "Just Note it!",
    "Manage Your Task!",
    "Summarise Notes By Gemini!"
);

$durCharFwd: 0.10;
$durFullGap: 2.00;
$durCharBwd: 0.08;
$durDoneGap: 1.00;

$charCount: 0; 
$durTotal: 0;

@each $string in $strings {
    $charCount: $charCount + str-length($string);
    $durTotal: $durTotal
        + (str-length($string) * ($durCharFwd + $durCharBwd))
        + $durFullGap + $durDoneGap;
}

@function percent($string, $letter, $modifier) {
    $stringsPast: $string - 1;
    $time: 0;
    @while $stringsPast > 0 {
        $time: $time
            + (($durCharFwd + $durCharBwd) * (str-length(nth($strings, $stringsPast))))
            + $durFullGap + $durDoneGap;
        $stringsPast: $stringsPast - 1;
    }
    @if $letter <= str-length(nth($strings, $string)) {
        $time: $time + ($durCharFwd * ($letter - 1));
    } @else {
        $time: $time
            + ($durCharFwd * str-length(nth($strings, $string)))
            + $durFullGap
            + ($durCharBwd * ($letter - str-length(nth($strings, $string))));
    }
    @return ($time / $durTotal * 100 + $modifier) + "%";
}

@keyframes typed {
    @for $i from 1 through length($strings) {
        @for $j from 1 through (str-length(nth($strings, $i)) * 2) {
            #{percent($i, $j, 0)}, #{percent($i, $j+1, -0.001)} {
                @if $j <= str-length(nth($strings, $i)) {
                    content: quote(#{str_slice(nth($strings, $i), 1, $j)});
                } @else {
                    content: quote(#{str_slice(nth($strings, $i), 1, str-length(nth($strings, $i)) - ($j - str-length(nth($strings, $i))))});
                }
            }
        }
    }
}

@keyframes beam-blink {
    75% { border-color: transparent; }
}

.typingeffect {
    position: relative;
    display: inline-block;

    &::after {
        content: "â€‹"; // Zero-width space
        display: inline-block;
        border-right: 3px solid black;
        animation: typed #{$durTotal + "s"} linear infinite, beam-blink 1s infinite;
    }
}
